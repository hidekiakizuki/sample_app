name: cd

on:
  push:
    branches:
      - main
      - 'release/**'
      - 'hotfix/**'

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: 'ap-northeast-1'
  AWS_ACCOUNT_ID: ${{ github.ref == 'refs/heads/main' && secrets.AWS_ACCOUNT_ID_PROD || secrets.AWS_ACCOUNT_ID_STG }}

jobs:
  check-active-deployments:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check web deployments
        run: |
          ACTIVE_DEPLOYMENTS=$(aws deploy list-deployments --application-name ${{ secrets.CODE_DEPLOY_APPLICATION_WEB }} --deployment-group-name ${{ secrets.CODE_DEPLOY_DEPLOYMENT_GROUP_WEB }} --include-only-statuses "Created" "Queued" "InProgress" --query 'deployments' --output text)
          if [ -n "$ACTIVE_DEPLOYMENTS" ]; then
            echo "Active deployment(s) found: $ACTIVE_DEPLOYMENTS"
            exit 1
          else
            echo "No active web deployments found."
          fi

  ci:
    uses: ./.github/workflows/ci.yaml

  build-tag:
    runs-on: ubuntu-latest

    timeout-minutes: 10

    outputs:
      tag: ${{ steps.build-tag.outputs.tag }}

    steps:
      - name: Check out code
        if: github.ref == 'refs/heads/main'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build Tag
        id: build-tag
        run: |
          if [[ "${{ github.ref }}" == 'refs/heads/main' ]]; then
            VERSION=$( (git log --merges -n 1 --pretty=%B | grep -o '/v[0-9]\+\.[0-9]\+\.[0-9]\+' || true) | head -n 1 | sed 's/\///')
            if [[ -z "$VERSION" ]]; then
              VERSION="1.0.0"
            fi
          fi
          if [[ -z "$VERSION" ]]; then
            TAG="staging-$(TZ=Asia/Tokyo date '+%Y-%m%d-%H%M%S')-${{ github.sha }}"
          else
            TAG="${VERSION}-${{ github.sha }}"
          fi
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo TAG: ${TAG}

  build-and-push-image:
    needs:
      - ci
      - build-tag

    runs-on: ubuntu-latest

    timeout-minutes: 10

    strategy:
      matrix:
        app: ['main', 'web-server']
        include:
          - app: main
            build-context: .
            dockerfile: ./Dockerfile
            build-args: APP_ENV=production
            ecr-repo-name: sample_app/main
            target: production
          - app: web-server
            build-context: ./docker/nginx
            dockerfile: ./docker/nginx/Dockerfile
            build-args: ''
            ecr-repo-name: sample_app/web_server
            target: production

    outputs:
      # タグ付きイメージを渡したいところですが、env.AWS_ACCOUNT_IDがsecretsでマスキングされるのでECRリポジトリ名を渡します。
      ecr-repo-name-main: ${{ steps.set-ecr-repo-name-main.outputs.ecr-repo-name-main }}
      ecr-repo-name-web-server: ${{ steps.set-ecr-repo-name-web-server.outputs.ecr-repo-name-web-server }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push to Amazon ECR
        uses: docker/build-push-action@v6
        env:
          DOCKER_CONTENT_TRUST: 1
        with:
          push: true
          context: ${{ matrix.build-context }}
          file: ${{ matrix.dockerfile }}
          build-args: ${{ matrix.build-args }}
          target: ${{ matrix.target }}
          platforms: linux/amd64
          provenance: false
          tags: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ matrix.ecr-repo-name }}:${{ needs.build-tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output ECR repository name for main
        id: set-ecr-repo-name-main
        if: matrix.app == 'main'
        run: echo "ecr-repo-name-main=${{ matrix.ecr-repo-name }}" >> "$GITHUB_OUTPUT"

      - name: Output ECR repository name for web-server
        id: set-ecr-repo-name-web-server
        if: matrix.app == 'web-server'
        run: echo "ecr-repo-name-web-server=${{ matrix.ecr-repo-name }}" >> "$GITHUB_OUTPUT"

  deploy-web:
    needs:
      - check-active-deployments
      - build-tag
      - build-and-push-image

    runs-on: ubuntu-latest

    timeout-minutes: 30

    outputs:
      codedeploy-deployment-id: ${{ steps.deploy.outputs.codedeploy-deployment-id }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Amazon ECS task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION_FAMILY_NAME_WEB }} --query taskDefinition > task-definition-web.json

      - name: Remove unnecessary fields from Amazon ECS task definition
        run: |
          echo $(cat task-definition-web.json | jq 'del(
            .compatibilities,
            .taskDefinitionArn,
            .requiresAttributes,
            .revision,
            .status,
            .registeredAt,
            .registeredBy
          )') > task-definition-web.json

      - name: Modify Amazon ECS task definition for web-app
        id: modify-task-definition-image-web-app
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-web.json
          container-name: ${{ secrets.ECS_CONTAINER_NAME_WEB_APP }}
          image: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ needs.build-and-push-image.outputs.ecr-repo-name-main }}:${{ needs.build-tag.outputs.tag }}

      - name: Modify Amazon ECS task definition for web-server
        id: modify-task-definition-image-web-server
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.modify-task-definition-image-web-app.outputs.task-definition }}
          container-name: ${{ secrets.ECS_CONTAINER_NAME_WEB_SERVER }}
          image: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ needs.build-and-push-image.outputs.ecr-repo-name-web-server }}:${{ needs.build-tag.outputs.tag }}

      - name: Prepare appspec-web.json
        run: |
          sed 's/{{LB_INFO_CONTAINER_NAME}}/${{ secrets.ECS_CONTAINER_NAME_WEB_SERVER }}/g' .github/templates/appspec-web.template.json > .github/templates/appspec-web.json

      - name: Deploy to Amazon ECS service
        id: deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.modify-task-definition-image-web-server.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE_NAME_WEB }}
          cluster: ${{ secrets.ECS_CLUSTER_NAME_WEB }}
          wait-for-service-stability: false
          codedeploy-appspec: .github/templates/appspec-web.json
          codedeploy-application: ${{ secrets.CODE_DEPLOY_APPLICATION_WEB }}
          codedeploy-deployment-group: ${{ secrets.CODE_DEPLOY_DEPLOYMENT_GROUP_WEB }}

  deploy-worker:
    needs:
      - check-active-deployments
      - build-tag
      - build-and-push-image
      - deploy-web # 念の為webのデプロイ成功後とします。

    runs-on: ubuntu-latest

    timeout-minutes: 30

    outputs:
      codedeploy-deployment-id: ${{ steps.deploy.outputs.codedeploy-deployment-id }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Amazon ECS task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION_FAMILY_NAME_WORKER }} --query taskDefinition > task-definition-worker.json

      - name: Remove unnecessary fields from Amazon ECS task definition
        run: |
          echo $(cat task-definition-worker.json | jq 'del(
            .compatibilities,
            .taskDefinitionArn,
            .requiresAttributes,
            .revision,
            .status,
            .registeredAt,
            .registeredBy
          )') > task-definition-worker.json

      - name: Modify Amazon ECS task definition for worker
        id: modify-task-definition-image-worker
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-worker.json
          container-name: ${{ secrets.ECS_CONTAINER_NAME_WORKER }}
          image: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ needs.build-and-push-image.outputs.ecr-repo-name-main }}:${{ needs.build-tag.outputs.tag }}

      - name: Deploy to Amazon ECS service
        id: deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.modify-task-definition-image-worker.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE_NAME_WORKER }}
          cluster: ${{ secrets.ECS_CLUSTER_NAME_WORKER }}
          wait-for-service-stability: true

  notify:
    needs:
      - check-active-deployments
      - ci
      - build-tag
      - build-and-push-image
      - deploy-web
      - deploy-worker

    runs-on: ubuntu-latest

    if: always()

    steps:
      - name: Get workflow conclusion
        id: get-workflow-conclusion
        if: always()
        run: |
          if [ "${{ needs.check-active-deployments.result }}" == "success" ] && \
             [ "${{ needs.ci.result }}" == "success" ] && \
             [ "${{ needs.build-tag.result }}" == "success" ] && \
             [ "${{ needs.build-and-push-image.result }}" == "success" ] && \
             [ "${{ needs.deploy-web.result }}" == "success" ] && \
             [ "${{ needs.deploy-worker.result }}" == "success" ] && \
             [ "${{ job.status }}" == "success" ]; then
            echo "conclusion=success"
            echo "message1=:tada: デプロイに成功しました" >> $GITHUB_OUTPUT
            message2="デプロイに問題がない場合、CodeDeployで「元のタスクセットの終了」を実行してください。\n"
            message2+="CodeDeploy\n"
            message2+="Web\n"
            message2+="https://console.aws.amazon.com/codesuite/codedeploy/deployments/${{ needs.deploy-web.outputs.codedeploy-deployment-id }}?region=${{ env.AWS_REGION }}\n"
            message2+="\n"
            message2+="問題があった場合は「デプロイを停止してロールバック」を実行し、Workerを前のタスク定義に戻してロールバックしてください。"
            echo "message2=${message2}" >> $GITHUB_OUTPUT
          else
            echo "conclusion=failure"
            echo "message1=:collision: デプロイに失敗しました" >> $GITHUB_OUTPUT

            web_link="なし"
            if [ -n "${{ needs.deploy-web.outputs.codedeploy-deployment-id }}" ]; then
              web_link="https://console.aws.amazon.com/codesuite/codedeploy/deployments/${{ needs.deploy-web.outputs.codedeploy-deployment-id }}?region=${{ env.AWS_REGION }}"
            fi

            message2="デプロイに問題が発生しました。詳細を確認してください。\n"
            message2+="GitHub Actions\n"
            message2+="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n"
            message2+="\n"
            message2+="CodeDeployで「デプロイを停止してロールバック」を実行してください。\n"
            message2+="${web_link}\n"
            message2+="\n"
            message2+="またWorkerを前のタスク定義に戻してロールバックしてください。"          
            echo "message2=${message2}" >> $GITHUB_OUTPUT
          fi

      - name: Notify Slack
        if: always()
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          payload: |
            {
              "text": "${{ steps.get-workflow-conclusion.outputs.message1 }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.get-workflow-conclusion.outputs.message1 }}\nCommit内容\n${{ github.event.head_commit.url }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.get-workflow-conclusion.outputs.message2 }}"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
