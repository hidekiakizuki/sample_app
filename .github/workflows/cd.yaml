name: cd

on:
  push:
    branches:
      - main
      - 'release/**'
      - 'hotfix/**'

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: 'ap-northeast-1'
  AWS_ACCOUNT_ID: ${{ github.ref == 'refs/heads/main' && secrets.AWS_ACCOUNT_ID_PROD || secrets.AWS_ACCOUNT_ID_STG }}

jobs:
  check-active-deployments:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check deployments
        run: |
          ACTIVE_DEPLOYMENTS=$(aws deploy list-deployments --application-name ${{ secrets.CODE_DEPLOY_APPLICATION }} --deployment-group-name ${{ secrets.CODE_DEPLOY_DEPLOYMENT_GROUP }} --include-only-statuses "Created" "Queued" "InProgress" --query 'deployments' --output text)
          if [ -n "$ACTIVE_DEPLOYMENTS" ]; then
            echo "Active deployment(s) found: $ACTIVE_DEPLOYMENTS"
            exit 1
          else
            echo "No active deployments found."
          fi

  ci:
    needs: check-active-deployments
    uses: ./.github/workflows/ci.yaml

  build-tag:
    runs-on: ubuntu-latest

    timeout-minutes: 10

    outputs:
      tag: ${{ steps.build-tag.outputs.tag }}

    steps:
      - name: Check out code
        if: github.ref == 'refs/heads/main'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build Tag
        id: build-tag
        run: |
          if [[ "${{ github.ref }}" == 'refs/heads/main' ]]; then
            VERSION=$( (git log --merges -n 1 --pretty=%B | grep -o '/v[0-9]\+\.[0-9]\+\.[0-9]\+' || true) | head -n 1 | sed 's/\///')
          fi
          if [[ -z "$VERSION" ]]; then
            TAG="staging-$(TZ=Asia/Tokyo date '+%Y-%m%d-%H%M%S')-${{ github.sha }}"
          else
            TAG="${VERSION}-${{ github.sha }}"
          fi
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo TAG: ${TAG}

  build-and-push-image:
    needs:
      - ci
      - build-tag

    runs-on: ubuntu-latest

    timeout-minutes: 10

    strategy:
      matrix:
        app: ['rails-web', 'nginx']
        include:
          - app: rails-web
            build-context: .
            dockerfile: ./Dockerfile
            build-args: APP_ENV=production
            image-name: sample_app/rails_web
          - app: nginx
            build-context: ./docker/nginx
            dockerfile: ./docker/nginx/Dockerfile
            build-args: ''
            image-name: sample_app/nginx

    outputs:
      image-name-rails-web: ${{ steps.set-image-name-rails-web.outputs.image-name-rails-web }}
      image-name-nginx: ${{ steps.set-image-name-nginx.outputs.image-name-nginx }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push to Amazon ECR
        uses: docker/build-push-action@v4
        env:
          DOCKER_CONTENT_TRUST: 1
        with:
          push: true
          context: ${{ matrix.build-context }}
          file: ${{ matrix.dockerfile }}
          build-args: ${{ matrix.build-args }}
          tags: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ matrix.image-name }}:${{ needs.build-tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image name for rails-web
        id: set-image-name-rails-web
        if: matrix.app == 'rails-web'
        run: echo "image-name-rails-web=${{ matrix.image-name }}" >> "$GITHUB_OUTPUT"

      - name: Output image name for nginx
        id: set-image-name-nginx
        if: matrix.app == 'nginx'
        run: echo "image-name-nginx=${{ matrix.image-name }}" >> "$GITHUB_OUTPUT"

  render-task-definition-and-deploy:
    needs:
      - build-and-push-image

    runs-on: ubuntu-latest

    timeout-minutes: 30

    outputs:
      codedeploy-deployment-id: ${{ steps.deploy.outputs.codedeploy-deployment-id }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION_FAMILY_NAME }} --query taskDefinition > task-definition.json

      - name: Remove unnecessary fields from task definition
        run: |
          echo $(cat task-definition.json | jq 'del(
            .compatibilities,
            .taskDefinitionArn,
            .requiresAttributes,
            .revision,
            .status,
            .registeredAt,
            .registeredBy
          )') > task-definition.json

      - name: Render Amazon ECS task definition for rails-web
        id: render-task-definition-rails-web
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ secrets.ECS_CONTAINER_NAME_RAILS }}
          image: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ needs.build-and-push-image.outputs.image-name-rails-web }}:${{ needs.build-tag.outputs.tag }}

      - name: Modify Amazon ECS task definition for nginx
        id: render-task-definition-nginx
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-definition-rails-web.outputs.task-definition }}
          container-name: ${{ secrets.ECS_CONTAINER_NAME_NGINX }}
          image: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ needs.build-and-push-image.outputs.image-name-nginx }}:${{ needs.build-tag.outputs.tag }}

      - name: Prepare appspec.json
        run: |
          sed 's/{{CONTAINER_NAME}}/${{ secrets.ECS_CONTAINER_NAME_NGINX }}/g' .github/templates/appspec.template.json > .github/templates/appspec.json

      - name: Deploy to Amazon ECS service
        id: deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-definition-nginx.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE_NAME }}
          cluster: ${{ secrets.ECS_CLUSTER_NAME }}
          wait-for-service-stability: false
          codedeploy-appspec: .github/templates/appspec.json
          codedeploy-application: ${{ secrets.CODE_DEPLOY_APPLICATION }}
          codedeploy-deployment-group: ${{ secrets.CODE_DEPLOY_DEPLOYMENT_GROUP }}

  notify:
    needs:
      - check-active-deployments
      - ci
      - build-tag
      - build-and-push-image
      - render-task-definition-and-deploy

    runs-on: ubuntu-latest

    if: always()

    steps:
      - name: Get workflow conclusion
        id: get-workflow-conclusion
        if: always()
        run: |
          if [ "${{ needs.check-active-deployments.result }}" == "success" ] && \
             [ "${{ needs.ci.result }}" == "success" ] && \
             [ "${{ needs.build-tag.result }}" == "success" ] && \
             [ "${{ needs.build-and-push-image.result }}" == "success" ] && \
             [ "${{ needs.render-task-definition-and-deploy.result }}" == "success" ] && \
             [ "${{ job.status }}" == "success" ]; then
            echo "conclusion=success"
            echo "message1=:tada: 成功しました" >> $GITHUB_OUTPUT
            echo "message2=デプロイに問題がない場合、CodeBuildで「元のタスクセットの終了」を実行してください。\n<https://console.aws.amazon.com/codesuite/codedeploy/deployments/${{ needs.render-task-definition-and-deploy.outputs.codedeploy-deployment-id }}?region=${{ env.AWS_REGION }}|CodeDeploy>" >> $GITHUB_OUTPUT
          else
            echo "conclusion=failure"
            echo "message1=:collision: 失敗しました" >> $GITHUB_OUTPUT
            echo "message2=デプロイに問題が発生しました。詳細を確認してください。\n<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|GitHub Actions>" >> $GITHUB_OUTPUT
          fi

      - name: Notify Slack
        if: always()
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          payload: |
            {
              "text": "ビルド結果: ${{ steps.get-workflow-conclusion.outputs.message1 }}\n${{ github.event.pull_request.html_url }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "ビルド結果: ${{ steps.get-workflow-conclusion.outputs.message1 }}\n<${{ github.event.pull_request.html_url }}|Pull Request>"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.get-workflow-conclusion.outputs.message2 }}"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
