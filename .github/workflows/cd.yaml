name: cd

on:
  push:
    branches:
      - main
      - 'release/**'
      - 'hotfix/**'

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: 'ap-northeast-1'
  AWS_ACCOUNT_ID: ${{ github.ref == 'refs/heads/main' && secrets.AWS_ACCOUNT_ID_PROD || secrets.AWS_ACCOUNT_ID_STG }}

jobs:
  check-active-deployments:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check deployments
        run: |
          ACTIVE_DEPLOYMENTS=$(aws deploy list-deployments --application-name ${{ secrets.CODE_DEPLOY_APPLICATION_WEB }} --deployment-group-name ${{ secrets.CODE_DEPLOY_DEPLOYMENT_GROUP_WEB }} --include-only-statuses "Created" "Queued" "InProgress" --query 'deployments' --output text)
          if [ -n "$ACTIVE_DEPLOYMENTS" ]; then
            echo "Active deployment(s) found: $ACTIVE_DEPLOYMENTS"
            exit 1
          else
            echo "No active deployments found."
          fi

  ci:
    needs: check-active-deployments
    uses: ./.github/workflows/ci.yaml

  build-tag:
    needs: check-active-deployments

    runs-on: ubuntu-latest

    timeout-minutes: 10

    outputs:
      tag: ${{ steps.build-tag.outputs.tag }}

    steps:
      - name: Check out code
        if: github.ref == 'refs/heads/main'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build Tag
        id: build-tag
        run: |
          if [[ "${{ github.ref }}" == 'refs/heads/main' ]]; then
            VERSION=$( (git log --merges -n 1 --pretty=%B | grep -o '/v[0-9]\+\.[0-9]\+\.[0-9]\+' || true) | head -n 1 | sed 's/\///')
            if [[ -z "$VERSION" ]]; then
              VERSION="1.0.0"
            fi
          fi
          if [[ -z "$VERSION" ]]; then
            TAG="staging-$(TZ=Asia/Tokyo date '+%Y-%m%d-%H%M%S')-${{ github.sha }}"
          else
            TAG="${VERSION}-${{ github.sha }}"
          fi
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo TAG: ${TAG}

  build-and-push-image:
    needs:
      - ci
      - build-tag

    runs-on: ubuntu-latest

    timeout-minutes: 10

    strategy:
      matrix:
        app: ['web-app', 'web-server', 'batch-default']
        include:
          - app: web-app
            build-context: .
            dockerfile: ./Dockerfile
            build-args: APP_ENV=production
            ecr-repo-name: sample_app/web_app
            target: web_production
          - app: web-server
            build-context: ./docker/nginx
            dockerfile: ./docker/nginx/Dockerfile
            build-args: ''
            ecr-repo-name: sample_app/web_server
            target: production
          - app: batch-default
            build-context: .
            dockerfile: ./Dockerfile
            build-args: APP_ENV=production
            ecr-repo-name: sample_app/batch_default
            target: batch_production

    outputs:
      # タグ付きイメージを渡したいところですが、env.AWS_ACCOUNT_IDがsecretsでマスキングされるのでECRリポジトリ名を渡します。
      ecr-repo-name-web-app: ${{ steps.set-ecr-repo-name-web-app.outputs.ecr-repo-name-web-app }}
      ecr-repo-name-web-server: ${{ steps.set-ecr-repo-name-web-server.outputs.ecr-repo-name-web-server }}
      ecr-repo-name-batch-default: ${{ steps.set-ecr-repo-name-batch-default.outputs.ecr-repo-name-batch-default }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push to Amazon ECR
        uses: docker/build-push-action@v6
        env:
          DOCKER_CONTENT_TRUST: 1
        with:
          push: true
          context: ${{ matrix.build-context }}
          file: ${{ matrix.dockerfile }}
          build-args: ${{ matrix.build-args }}
          target: ${{ matrix.target }}
          tags: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ matrix.ecr-repo-name }}:${{ needs.build-tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output ECR repository name for web-app
        id: set-ecr-repo-name-web-app
        if: matrix.app == 'web-app'
        run: echo "ecr-repo-name-web-app=${{ matrix.ecr-repo-name }}" >> "$GITHUB_OUTPUT"

      - name: Output ECR repository name for web-server
        id: set-ecr-repo-name-web-server
        if: matrix.app == 'web-server'
        run: echo "ecr-repo-name-web-server=${{ matrix.ecr-repo-name }}" >> "$GITHUB_OUTPUT"

      - name: Output ECR repository name for batch
        id: set-ecr-repo-name-batch-default
        if: matrix.app == 'batch-default'
        run: echo "ecr-repo-name-batch-default=${{ matrix.ecr-repo-name }}" >> "$GITHUB_OUTPUT"

  render-ecs-task-definition-and-deploy:
    needs:
      - build-tag
      - build-and-push-image

    runs-on: ubuntu-latest

    timeout-minutes: 30

    outputs:
      codedeploy-deployment-id: ${{ steps.deploy.outputs.codedeploy-deployment-id }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Amazon ECS task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION_FAMILY_NAME_WEB }} --query taskDefinition > task-definition.json

      - name: Remove unnecessary fields from Amazon ECS task definition
        run: |
          echo $(cat task-definition.json | jq 'del(
            .compatibilities,
            .taskDefinitionArn,
            .requiresAttributes,
            .revision,
            .status,
            .registeredAt,
            .registeredBy
          )') > task-definition.json

      - name: Modify Amazon ECS task definition for web-app
        id: modify-task-definition-image-web-app
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ secrets.ECS_CONTAINER_NAME_WEB_APP }}
          image: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ needs.build-and-push-image.outputs.ecr-repo-name-web-app }}:${{ needs.build-tag.outputs.tag }}

      - name: Modify Amazon ECS task definition for web-server
        id: modify-task-definition-image-web-server
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.modify-task-definition-image-web-app.outputs.task-definition }}
          container-name: ${{ secrets.ECS_CONTAINER_NAME_WEB_SERVER }}
          image: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ needs.build-and-push-image.outputs.ecr-repo-name-web-server }}:${{ needs.build-tag.outputs.tag }}

      - name: Prepare appspec.json
        run: |
          sed 's/{{LB_INFO_CONTAINER_NAME}}/${{ secrets.ECS_CONTAINER_NAME_WEB_SERVER }}/g' .github/templates/appspec.template.json > .github/templates/appspec.json

      - name: Deploy to Amazon ECS service
        id: deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.modify-task-definition-image-web-server.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE_NAME_WEB }}
          cluster: ${{ secrets.ECS_CLUSTER_NAME_WEB }}
          wait-for-service-stability: false
          codedeploy-appspec: .github/templates/appspec.json
          codedeploy-application: ${{ secrets.CODE_DEPLOY_APPLICATION_WEB }}
          codedeploy-deployment-group: ${{ secrets.CODE_DEPLOY_DEPLOYMENT_GROUP_WEB }}

  render-batch-default-job-definition:
    needs:
      - build-tag
      - build-and-push-image

    runs-on: ubuntu-latest

    timeout-minutes: 30

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

#      - name: Download AWS Batch job definition
#        run: |
#          aws batch describe-job-definitions --job-definition-name batch-default --status ACTIVE --query "sort_by(jobDefinitions[?jobDefinitionName=='batch-default'], &revision)[-1]" > job-definition.json

      - name: Debug AWS Batch job definition output1
        run: |
          aws batch describe-job-definitions --job-definition-name batch-default --status ACTIVE --query "sort_by(jobDefinitions[?jobDefinitionName=='batch-default'], &revision)[-1]" > job-definition.json
          cat job-definition.json

      - name: Check if job-definition.json exists
        run: |
          aws batch describe-job-definitions --job-definition-name batch-default --status ACTIVE --query "sort_by(jobDefinitions[?jobDefinitionName=='batch'], &revision)[-1]" > job-definition.json

      - name: Remove unnecessary fields from AWS Batch job definition
        run: |
          jq 'del(.jobDefinitionArn, .revision, .status, .containerOrchestrationType)' \
            job-definition.json > new-job-definition.json && mv new-job-definition.json job-definition.json
  
      - name: Debug AWS Batch job definition output2
        run: |
          cat job-definition.json

      - name: Modify AWS Batch job definition
        id: modify-job-definition-image-batch-default
        run: |
          CONTAINER_NAME="${{ secrets.BATCH_CONTAINER_NAME_DEFAULT }}"
          IMAGE_URI="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ needs.build-and-push-image.outputs.ecr-repo-name-batch-default }}:${{ needs.build-tag.outputs.tag }}"
          jq --arg container_name "$CONTAINER_NAME" --arg image_uri "$IMAGE_URI" \
            '.ecsProperties.taskProperties[].containers[] |= if .name == $container_name then .image = $image_uri else . end' \
            job-definition.json > new-job-definition.json && mv new-job-definition.json job-definition.json

      - name: Debug AWS Batch job definition output3
        run: |
          cat job-definition.json
    
      - name: Register new AWS Batch job definition
        run: |
          aws batch register-job-definition --cli-input-json job-definition.json

  notify:
    needs:
      - check-active-deployments
      - ci
      - build-tag
      - build-and-push-image
      - render-ecs-task-definition-and-deploy
      - render-batch-default-job-definition

    runs-on: ubuntu-latest

    if: always()

    steps:
      - name: Get workflow conclusion
        id: get-workflow-conclusion
        if: always()
        run: |
          if [ "${{ needs.check-active-deployments.result }}" == "success" ] && \
             [ "${{ needs.ci.result }}" == "success" ] && \
             [ "${{ needs.build-tag.result }}" == "success" ] && \
             [ "${{ needs.build-and-push-image.result }}" == "success" ] && \
             [ "${{ needs.render-ecs-task-definition-and-deploy.result }}" == "success" ] && \
             [ "${{ needs.render-batch-default-job-definition.result }}" == "success" ] && \
             [ "${{ job.status }}" == "success" ]; then
            echo "conclusion=success"
            echo "message1=:tada: デプロイに成功しました" >> $GITHUB_OUTPUT
            echo "message2=デプロイに問題がない場合、CodeBuildで「元のタスクセットの終了」を実行してください。\nCodeDeploy\nhttps://console.aws.amazon.com/codesuite/codedeploy/deployments/${{ needs.render-ecs-task-definition-and-deploy.outputs.codedeploy-deployment-id }}?region=${{ env.AWS_REGION }}" >> $GITHUB_OUTPUT
          else
            echo "conclusion=failure"
            echo "message1=:collision: デプロイに失敗しました" >> $GITHUB_OUTPUT
            echo "message2=デプロイに問題が発生しました。詳細を確認してください。\nGitHub Actions\nhttps://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_OUTPUT
          fi

      - name: Notify Slack
        if: always()
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          payload: |
            {
              "text": "${{ steps.get-workflow-conclusion.outputs.message1 }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.get-workflow-conclusion.outputs.message1 }}\nCommit内容\n${{ github.event.head_commit.url }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.get-workflow-conclusion.outputs.message2 }}"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
