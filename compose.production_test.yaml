services:
  sample_app_db:
    image: postgres
    container_name: sample_app_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: --encoding=UTF-8 --locale=C
      TZ: Asia/Tokyo
    ports:
      - "5432:5432"
    volumes:
      - sample_app_postgres:/var/lib/postgresql/data
      - ./docker/db/initdb:/docker-entrypoint-initdb.d
  sample_app_web_app:
    build:
      context: .
      target: production
      args:
        - APP_ENV=production
    image: sample_app_web_app:prd
    container_name: sample_app_web_app.prd
    volumes:
      - sample_app_tmp:/sample_app/tmp
      - sample_app_public:/sample_app/public
    env_file:
      - .env
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      AWS_REGION: ${AWS_REGION}
    ports:
      - "3000:3000"
    tty: true
    stdin_open: true
    command: >
      bash -c "rm -f /sample_app/tmp/pids/server.pid && \
      bundle install --jobs $(nproc) && \
      (bundle exec rails db:create || true) && \
      bundle exec rails db:migrate && \
      bundle exec puma -C config/puma.rb && \
      echo 'Running in production mode'"
    depends_on:
      - sample_app_db
  sample_app_web_server:
    build:
      context: ./docker/nginx
      target: production
    image: sample_app_web_server:prd
    container_name: sample_app_web_server.prd
    volumes:
      - sample_app_tmp:/sample_app/tmp:ro
      - sample_app_public:/sample_app/public:ro
    ports:
      - 80:80
    depends_on:
      - sample_app_web_app
volumes:
  sample_app_postgres:
  sample_app_tmp:
  sample_app_public:
