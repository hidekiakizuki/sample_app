x-sample_app_base: &sample_app_base
  build:
    context: .
    target: production
    args:
      - APP_ENV=production
  image: sample_app_web_app:prd
  env_file:
    - .env
  environment:
    AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN}
    AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
    AWS_REGION: ${AWS_REGION}
  tty: true
  stdin_open: true

services:
  sample_app_db:
    image: postgres
    container_name: sample_app_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: --encoding=UTF-8 --locale=C
      TZ: Asia/Tokyo
    ports:
      - "5432:5432"
    volumes:
      - sample_app_postgres:/var/lib/postgresql/data
      - ./docker/db/initdb:/docker-entrypoint-initdb.d

  # elasticacheで自己証明書を利用する場合はRailsのconfig.cache_storeオプションで以下を追加してください。
  # ssl_params: { verify_mode: OpenSSL::SSL::VERIFY_NONE }
  sample_app_web_app:
    <<: *sample_app_base
    container_name: sample_app_web_app.prd
    volumes:
      - sample_app_tmp:/sample_app/tmp
      - sample_app_public:/sample_app/public
    ports:
      - "3000:3000"
    command: >
      bash -c "rm -f /sample_app/tmp/pids/server.pid && \
      bundle install --jobs $(nproc) && \
      (bundle exec rails db:create || true) && \
      bundle exec rails db:migrate && \
      bundle exec puma -C config/puma.rb && \
      echo 'Running in production mode'"
    depends_on:
      sample_app_db:
        condition: service_started
      elasticache:
        condition: service_healthy
      localstack:
        condition: service_healthy

  sample_app_web_server:
    build:
      context: ./docker/nginx
      target: production
    image: sample_app_web_server:prd
    container_name: sample_app_web_server.prd
    volumes:
      - sample_app_tmp:/sample_app/tmp:ro
      - sample_app_public:/sample_app/public:ro
    ports:
      - 80:80
    depends_on:
      - sample_app_web_app

  sample_app_worker:
    <<: *sample_app_base
    container_name: worker
    command: >
      bundle exec aws_sqs_active_job --queue default
    depends_on:
      localstack:
        condition: service_healthy

  elasticache:
    image: valkey/valkey:latest
    ports:
      - "6379:6379"
    environment:
      - ELASTICACHE_USER=${ELASTICACHE_USER}
      - ELASTICACHE_PASSWORD=${ELASTICACHE_PASSWORD}
      - ELASTICACHE_HOST=${ELASTICACHE_HOST}
      - VALKEY_TLS_ENABLED=yes
      - VALKEY_TLS_CERT_FILE=/etc/ssl/certs/server.crt
      - VALKEY_TLS_KEY_FILE=/etc/ssl/private/server.key
      - VALKEY_TLS_CA_FILE=/etc/ssl/certs/ca.crt
      - VALKEY_ACLFILE=/etc/valkey/users.acl
    volumes:
      - "./docker/elasticache/certs:/etc/ssl/certs"
      - "./docker/elasticache/private:/etc/ssl/private"
      - "./docker/elasticache/config/users.acl:/etc/valkey/users.acl"
    command: >
      redis-server
        --bind 0.0.0.0
        --tls-port 6379
        --port 0
        --aclfile /etc/valkey/users.acl
        --tls-cert-file /etc/ssl/certs/server.crt
        --tls-key-file /etc/ssl/private/server.key
        --tls-ca-cert-file /etc/ssl/certs/ca.crt
        --tls-auth-clients optional
    healthcheck:
      test: [
        "CMD",
        "redis-cli",
        "--tls",
        "--cert", "/etc/ssl/certs/server.crt",
        "--key", "/etc/ssl/private/server.key",
        "--cacert", "/etc/ssl/certs/ca.crt",
        "-u", "rediss://${ELASTICACHE_USER}:${ELASTICACHE_PASSWORD}@localhost:6379",
        "ping"
      ]
      interval: 1s
      timeout: 5s
      retries: 3

  localstack:
    container_name: "${LOCALSTACK_DOCKER_NAME:-localstack-main}"
    image: localstack/localstack
    ports:
      - "127.0.0.1:4566:4566"            # LocalStack Gateway
      - "127.0.0.1:4510-4559:4510-4559"  # external services port range
    environment:
      # LocalStack configuration: https://docs.localstack.cloud/references/configuration/
      - DEBUG=${DEBUG:-0}
      - SERVICES=sqs
    volumes:
      - "./docker/localstack/init-aws.sh:/etc/localstack/init/ready.d/init-aws.sh"
      - "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    healthcheck:
      test: ["CMD-SHELL", "awslocal sqs list-queues || exit 1"]
      interval: 3s
      timeout: 5s
      retries: 5
      start_period: 1s

volumes:
  sample_app_postgres:
  sample_app_tmp:
  sample_app_public:
